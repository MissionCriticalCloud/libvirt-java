dnl
dnl configure file for libvirt java bindings
dnl Process this file with autoconf to produce a configure script.
dnl
dnl Copyright (C) Red Hat, Inc.
dnl
dnl See COPYING.LIB for the License of this software
dnl
dnl Daniel Veillard <veillard@redhat.com>
dnl
AC_INIT([libvirt-java], [0.1.1])
AC_CONFIG_SRCDIR([src/jni/org_libvirt_VirDomain.c])
AC_CONFIG_AUX_DIR(.)
AC_CONFIG_HEADER([config.h])
AM_INIT_AUTOMAKE([-Wno-portability])
AC_CANONICAL_HOST

LIBVIRT_REQUIRED="0.4.0"

JNI_MAJOR_VERSION=`echo $VERSION | awk -F. '{print $1}'`
JNI_MINOR_VERSION=`echo $VERSION | awk -F. '{print $2}'`
JNI_MICRO_VERSION=`echo $VERSION | awk -F. '{print $3}'`
JNI_VERSION_INFO=`expr $JNI_MAJOR_VERSION + $JNI_MINOR_VERSION`:$JNI_MICRO_VERSION:$JNI_MINOR_VERSION
JNI_VERSION_NUMBER=`expr $JNI_MAJOR_VERSION \* 1000000 + $JNI_MINOR_VERSION \* 1000 + $JNI_MICRO_VERSION`

AC_SUBST([JNI_MAJOR_VERSION])
AC_SUBST([JNI_MINOR_VERSION])
AC_SUBST([JNI_MICRO_VERSION])
AC_SUBST([JNI_VERSION])
AC_SUBST([JNI_VERSION_INFO])
AC_SUBST([JNI_VERSION_NUMBER])

AC_SUBST([LIBVIRT_REQUIRED])

AC_PROG_CC
AC_PROG_INSTALL
AM_PROG_CC_C_O

AC_DISABLE_STATIC
dnl Support building Win32 DLLs (must appear *before* AM_PROG_LIBTOOL)
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

INSTALLED_JAR_DIR=\${prefix}/share/java
INSTALLED_JNI_DIR=\${prefix}/lib/
AC_SUBST(INSTALLED_JAR_DIR)
AC_SUBST(INSTALLED_JNI_DIR)

PKG_CHECK_MODULES(LIBVIRT, libvirt >= $LIBVIRT_REQUIRED)
AC_SUBST(LIBVIRT_CFLAGS)
AC_SUBST(LIBVIRT_LIBS)

AC_PATH_PROG([JAVA], [java], [no])
if test x"$JAVA" = x"no" ; then
    AC_MSG_ERROR([Cannot find java which is needed by libvirt-java build])
fi
AC_PATH_PROG([JAVAC], [javac], [no])
if test x"$JAVAC" = x"no" ; then
    AC_MSG_ERROR([Cannot find javac which is needed by libvirt-java build])
fi
AC_PATH_PROG([JAVAH], [javah], [no])
if test x"$JAVAH" = x"no" ; then
    AC_MSG_ERROR([Cannot find javah which is needed by libvirt-java build])
fi
AC_PATH_PROG([JAVADOC], [javadoc], [no])
if test x"$JAVADOC" = x"no" ; then
    AC_MSG_ERROR([Cannot find javadoc which is needed by libvirt-java build])
fi
AC_PATH_PROG([JAR], [jar], [no])
if test x"$JAR" = x"no" ; then
    AC_MSG_ERROR([Cannot find jar which is needed by libvirt-java build])
fi

dnl
dnl Try to guess where the javah/javac is located, to guess the 
dnl SDK used and then provide a possible include path for jni.h
dnl
SDK=
for binary in $JAVAH $JAVAC
do
    command=`basename $binary`
    # try first with a full expansion
    expand=`readlink -f $binary`
    check=`echo $expand | grep "/bin/$command"`
    if test x"$check" != x"" ; then
        SDK=`echo $expand | sed s+/bin/$command++`
	if test -d $SDK/include ; then
	    echo using Java SDK in $SDK
	    break
	fi
    fi
    # expands progressingly we try up to 3 steps of expansion
    expand=`readlink $binary`
    check=`echo $expand | grep "/bin/$command"`
    if test x"$check" != x"" ; then
        SDK=`echo $expand | sed s+/bin/$command++`
	if test -d $SDK/include ; then
	    echo using Java SDK in $SDK
	    break
	fi
    fi
    expand=`readlink $expand`
    check=`echo $expand | grep "/bin/$command"`
    if test x"$check" != x"" ; then
        SDK=`echo $expand | sed s+/bin/$command++`
	if test -d $SDK/include ; then
	    echo using Java SDK in $SDK
	    break
	fi
    fi
    expand=`readlink $expand`
    check=`echo $expand | grep "/bin/$command"`
    if test x"$check" != x"" ; then
        SDK=`echo $expand | sed s+/bin/$command++`
	if test -d $SDK/include ; then
	    echo using Java SDK in $SDK
	    break
	fi
    fi
done

if test x"$SDK" = x"" ; then
    AC_MSG_ERROR([Unable to guess the Java SDK used by libvirt-java build])
fi

dnl
dnl then find the jni.h include file usually in the include subdir
dnl
JNI_CFLAGS=

if test -f $SDK/include/jni.h ; then
    JNI_CFLAGS="-I$SDK/include"
else
if test "`find $SDK -name jni.h`" != "" ; then
    head=`find $SDK -name jni.h | tail -1`
    dir=`dirname $head`
    JNI_CFLAGS="-I$dir"
fi
fi

dnl
dnl then one need to find jni_md.h too usually in a system specific subdir
dnl
case "$build_os" in
    *linux*)
        system="linux"
	;;
    *)
        system="$build_os"
	;;
esac

if test -f $SDK/include/$system/jni_md.h ; then
    JNI_CFLAGS="$JNI_CFLAGS -I$SDK/include/$system"
else
if test "`find $SDK -name jni_md.h`" != "" ; then
    head=`find $SDK -name jni_md.h | tail -1`
    dir=`dirname $head`
    JNI_CFLAGS="$JNI_CFLAGS -I$dir"
fi
fi
AC_SUBST(SDK)
AC_SUBST(JNI_CFLAGS)

dnl
dnl Depending on the JAVAC version used one may need additional version flag
dnl
JAVAC_FLAGS=
javac_version=`$JAVAC -version 2>&1`
case "$javac_version" in
    *Eclipse*)
        JAVAC_FLAGS="-version 1.5"
	;;
esac
AC_SUBST(JAVAC_FLAGS)

# very annoying
rm -f COPYING
cp COPYING.LIB COPYING

AC_OUTPUT(Makefile src/Makefile src/jni/Makefile doc/Makefile libvirt-java.pc libvirt-java.spec)
